
generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String      
  username            String              @unique  
  lastSeen            DateTime?    
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  pfp                 ProfilePics[]        
  requests            Requests[]
  friends             Friends[]           @relation("UserFriends")
  friendOf            Friends[]           @relation("FriendUsers")
  adminOf             GroupAdmin[]
  memberOf            GroupMembership[]
  groupMessages       Groupchat[]     
}
model Friends {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 
  friendId            Int                 
  unreadMessageCount  Int?       
  user                Users               @relation("UserFriends", fields: [userId], references: [id])
  friend              Users               @relation("FriendUsers", fields: [friendId], references: [id])
}
model ProfilePics{
  id                  Int                 @id @default(autoincrement())
  uid                 Int                 @unique               
  path                String              @default("ProfilePics/default-pic.jpg")
  link                String              @default("https://firebasestorage.googleapis.com/v0/b/chatapp-4deee.appspot.com/o/ProfilePics%2Fdefault-pic.jpg?alt=media&token=53c51d35-079f-4e2e-addc-c6b40cfe8630")
  user                Users               @relation(fields: [uid] , references: [id])
}
model Requests {
  id                  Int                 @id @default(autoincrement())
  sender              String?         
  senderId            Int        
  receiver            String?         
  receiverId          Int                   
  status              RequestStatus       @default(PENDING)
  createdAt           DateTime            @default(now())
  acceptedAt          DateTime?
  user                Users               @relation(fields: [senderId], references: [id]) 
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
model Chat {
  id                  Int                 @id @default(autoincrement())
  senderId            Int
  receiverId          Int
  message             String
  time                DateTime
  seen                Boolean             @default(false)
}

model Group {
  id                  Int                 @id @default(autoincrement())
  name                String
  pfp                 String              @default("https://firebasestorage.googleapis.com/v0/b/chatapp-4deee.appspot.com/o/ProfilePics%2Fdefault-group.png?alt=media&token=58a2f3df-90c6-4ec8-8552-fa1b41cc77e8")
  members             GroupMembership[]   // Relationship to members
  admins              GroupAdmin[]        // Relationship to admins
  groupchat           Groupchat[]
}

model GroupMembership {
  id                  Int                 @id @default(autoincrement())
  groupId             Int
  userId              Int
  group               Group               @relation(fields: [groupId], references: [id])
  user                Users               @relation(fields: [userId], references: [id])
}

model GroupAdmin {
  id                  Int                 @id @default(autoincrement())
  groupId             Int
  userId              Int
  group               Group               @relation(fields: [groupId], references: [id])
  user                Users               @relation(fields: [userId], references: [id])
}

model Groupchat {
  id                  Int                 @id @default(autoincrement())
  groupId             Int                 
  senderId            Int
  message             String
  seenBy              Int[]               @default([])
  time                DateTime            @default(now())
  group               Group               @relation(fields: [groupId], references: [id])
  sender              Users               @relation(fields: [senderId], references: [id])
}





// model Users {
//   id                  Int                 @id @default(autoincrement())
//   email               String              @unique
//   password            String      
//   username            String              @unique  
//   pfp                 String?
//   lastSeen            DateTime?    
//   createdAt           DateTime            @default(now())
//   updatedAt           DateTime            @default(now())
//   requestSent         Requests[]          @relation("sender")
//   requestReceived     Requests[]          @relation("receiver")
//   friends             Friends[]           @relation("UserFriends")
//   friendOf            Friends[]           @relation("FriendUsers")
// }
// model Requests {
//   id                  Int                 @id @default(autoincrement())
//   senderId            Int       
//   receiverId          Int       
//   status              RequestStatus       @default(PENDING)
//   createdAt           DateTime            @default(now())
//   acceptedAt          DateTime?
//   sender              Users               @relation( "sender" ,fields: [senderId], references: [id]) 
//   receiver            Users               @relation( "receiver" ,fields: [receiverId], references: [id]) 
// }